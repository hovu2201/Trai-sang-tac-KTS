/**
 * File System Service - L∆∞u ·∫£nh v√†o th∆∞ m·ª•c local c·ªßa ng∆∞·ªùi d√πng
 */

let directoryHandle: FileSystemDirectoryHandle | null = null;

/**
 * Ki·ªÉm tra tr√¨nh duy·ªát c√≥ h·ªó tr·ª£ File System Access API kh√¥ng
 */
export const isFileSystemSupported = (): boolean => {
  return 'showDirectoryPicker' in window;
};

/**
 * Y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªçn th∆∞ m·ª•c ƒë·ªÉ l∆∞u ·∫£nh
 */
export const requestDirectoryAccess = async (): Promise<boolean> => {
  try {
    if (!isFileSystemSupported()) {
      console.warn('File System Access API not supported');
      return false;
    }

    // @ts-ignore - File System Access API
    directoryHandle = await window.showDirectoryPicker({
      mode: 'readwrite',
      startIn: 'pictures',
    });

    // L∆∞u handle v√†o localStorage (ch·ªâ l∆∞u name ƒë·ªÉ hi·ªÉn th·ªã)
    if (directoryHandle) {
      localStorage.setItem('phong_nam_directory_name', directoryHandle.name);
      return true;
    }
    return false;
  } catch (error) {
    if ((error as Error).name === 'AbortError') {
      console.log('User cancelled directory selection');
    } else {
      console.error('Error accessing directory:', error);
    }
    return false;
  }
};

/**
 * L·∫•y t√™n th∆∞ m·ª•c ƒë√£ ch·ªçn
 */
export const getDirectoryName = (): string | null => {
  return localStorage.getItem('phong_nam_directory_name');
};

/**
 * Ki·ªÉm tra quy·ªÅn truy c·∫≠p th∆∞ m·ª•c
 */
export const verifyDirectoryPermission = async (): Promise<boolean> => {
  if (!directoryHandle) return false;

  // Chrome/Edge specific API - check if available
  if ('queryPermission' in directoryHandle && 'requestPermission' in directoryHandle) {
    const permission = await (directoryHandle as any).queryPermission({ mode: 'readwrite' });
    if (permission === 'granted') {
      return true;
    }

    // Y√™u c·∫ßu quy·ªÅn l·∫°i n·∫øu ch∆∞a c√≥
    const newPermission = await (directoryHandle as any).requestPermission({ mode: 'readwrite' });
    return newPermission === 'granted';
  }
  
  // Fallback: assume permission granted if we got the handle
  return true;
};

/**
 * L∆∞u ·∫£nh v√†o th∆∞ m·ª•c local
 */
export const saveImageToLocalDirectory = async (
  imageDataUrl: string,
  filename: string
): Promise<boolean> => {
  try {
    if (!directoryHandle) {
      console.warn('No directory selected');
      return false;
    }

    // Ki·ªÉm tra quy·ªÅn
    const hasPermission = await verifyDirectoryPermission();
    if (!hasPermission) {
      console.warn('No permission to write to directory');
      return false;
    }

    // Chuy·ªÉn ƒë·ªïi data URL sang Blob
    const response = await fetch(imageDataUrl);
    const blob = await response.blob();

    // T·∫°o file trong th∆∞ m·ª•c
    const fileHandle = await directoryHandle.getFileHandle(filename, { create: true });
    const writable = await fileHandle.createWritable();
    await writable.write(blob);
    await writable.close();

    console.log(`Saved image to local directory: ${filename}`);
    return true;
  } catch (error) {
    console.error('Error saving image to local directory:', error);
    return false;
  }
};

/**
 * M·ªü th∆∞ m·ª•c ƒë√£ ch·ªçn trong File Explorer
 * Note: Browser kh√¥ng cho ph√©p m·ªü folder tr·ª±c ti·∫øp, nh∆∞ng c√≥ th·ªÉ request l·∫°i quy·ªÅn truy c·∫≠p
 */
export const openLocalDirectory = async (): Promise<boolean> => {
  try {
    if (!isFileSystemSupported()) {
      alert('Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ ch·ª©c nƒÉng n√†y.\n\nVui l√≤ng s·ª≠ d·ª•ng Chrome ho·∫∑c Edge phi√™n b·∫£n m·ªõi nh·∫•t.');
      return false;
    }

    if (!directoryHandle) {
      const dirName = getDirectoryName();
      if (dirName) {
        alert(`Th∆∞ m·ª•c ƒë√£ ch·ªçn: ${dirName}\n\nƒê·ªÉ xem ·∫£nh, h√£y m·ªü File Explorer v√† t√¨m th∆∞ m·ª•c n√†y.\n\nHo·∫∑c nh·∫•n n√∫t "Ch·ªçn th∆∞ m·ª•c" ƒë·ªÉ ch·ªçn l·∫°i v√† c·∫•p quy·ªÅn truy c·∫≠p.`);
      } else {
        alert('Ch∆∞a ch·ªçn th∆∞ m·ª•c l∆∞u tr·ªØ.\n\nH√£y nh·∫•n n√∫t "Ch·ªçn th∆∞ m·ª•c" ƒë·ªÉ ch·ªçn th∆∞ m·ª•c.');
      }
      return false;
    }

    // Ki·ªÉm tra v√† y√™u c·∫ßu quy·ªÅn l·∫°i
    const hasPermission = await verifyDirectoryPermission();
    if (hasPermission) {
      // Show directory info with file count
      const files = await listFilesInDirectory();
      alert(
        `üìÅ Th∆∞ m·ª•c: ${directoryHandle.name}\n\n` +
        `S·ªë ·∫£nh ƒë√£ l∆∞u: ${files.length} file\n\n` +
        `ƒê·ªÉ xem ·∫£nh, m·ªü File Explorer v√† t√¨m th∆∞ m·ª•c "${directoryHandle.name}".\n\n` +
        `üí° M·∫πo: T√¨m trong th∆∞ m·ª•c Pictures/Documents ho·∫∑c d√πng t√≠nh nƒÉng t√¨m ki·∫øm c·ªßa Windows.`
      );
      return true;
    } else {
      alert('Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p th∆∞ m·ª•c.\n\nH√£y nh·∫•n n√∫t "Ch·ªçn th∆∞ m·ª•c" ƒë·ªÉ c·∫•p quy·ªÅn l·∫°i.');
      return false;
    }
  } catch (error) {
    console.error('Error opening directory:', error);
    alert('Kh√¥ng th·ªÉ truy c·∫≠p th∆∞ m·ª•c.\n\nH√£y ch·ªçn l·∫°i th∆∞ m·ª•c ƒë·ªÉ c·∫•p quy·ªÅn.');
    return false;
  }
};

/**
 * X√≥a quy·ªÅn truy c·∫≠p th∆∞ m·ª•c
 */
export const clearDirectoryAccess = () => {
  directoryHandle = null;
  localStorage.removeItem('phong_nam_directory_name');
};

/**
 * L·∫•y danh s√°ch file trong th∆∞ m·ª•c
 */
export const listFilesInDirectory = async (): Promise<string[]> => {
  try {
    if (!directoryHandle) return [];

    const hasPermission = await verifyDirectoryPermission();
    if (!hasPermission) return [];

    const files: string[] = [];
    // @ts-ignore
    for await (const entry of directoryHandle.values()) {
      if (entry.kind === 'file' && entry.name.match(/\.(png|jpg|jpeg)$/i)) {
        files.push(entry.name);
      }
    }
    return files;
  } catch (error) {
    console.error('Error listing files:', error);
    return [];
  }
};

/**
 * ƒê·ªçc ·∫£nh t·ª´ th∆∞ m·ª•c local
 */
export const readImageFromLocalDirectory = async (filename: string): Promise<string | null> => {
  try {
    if (!directoryHandle) return null;

    const hasPermission = await verifyDirectoryPermission();
    if (!hasPermission) return null;

    const fileHandle = await directoryHandle.getFileHandle(filename);
    const file = await fileHandle.getFile();
    
    return new Promise((resolve) => {
      const reader = new FileReader();
      reader.onload = (e) => resolve(e.target?.result as string);
      reader.onerror = () => resolve(null);
      reader.readAsDataURL(file);
    });
  } catch (error) {
    console.error('Error reading image:', error);
    return null;
  }
};
